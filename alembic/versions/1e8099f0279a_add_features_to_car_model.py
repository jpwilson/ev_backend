"""Add features to car model

Revision ID: 1e8099f0279a
Revises: 3a5de80cc06a
Create Date: 2023-11-07 12:00:03.531520

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = '1e8099f0279a'
down_revision: Union[str, None] = '3a5de80cc06a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_cars_id', table_name='cars')
    op.drop_index('ix_cars_model', table_name='cars')
    op.drop_table('cars')
    op.drop_index('ix_makes_id', table_name='makes')
    op.drop_index('ix_makes_name', table_name='makes')
    op.drop_table('makes')
    op.drop_table('make_founders_association')
    op.drop_table('make_person_association')
    op.drop_index('ix_people_id', table_name='people')
    op.drop_table('people')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('people',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('age', sa.INTEGER(), nullable=True),
    sa.Column('location', sa.VARCHAR(), nullable=True),
    sa.Column('university_degree', sa.VARCHAR(), nullable=True),
    sa.Column('current_company', sa.VARCHAR(), nullable=True),
    sa.Column('skills', sa.VARCHAR(), nullable=True),
    sa.Column('strengths', sqlite.JSON(), nullable=True),
    sa.Column('weaknesses', sqlite.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_people_id', 'people', ['id'], unique=False)
    op.create_table('make_person_association',
    sa.Column('make_id', sa.INTEGER(), nullable=True),
    sa.Column('person_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['make_id'], ['makes.id'], ),
    sa.ForeignKeyConstraint(['person_id'], ['people.id'], )
    )
    op.create_table('make_founders_association',
    sa.Column('make_id', sa.INTEGER(), nullable=True),
    sa.Column('person_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['make_id'], ['makes.id'], ),
    sa.ForeignKeyConstraint(['person_id'], ['people.id'], )
    )
    op.create_table('makes',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=True),
    sa.Column('ceo_id', sa.INTEGER(), nullable=True),
    sa.Column('ceo_pay', sa.FLOAT(), nullable=True),
    sa.Column('headquarters', sa.VARCHAR(), nullable=True),
    sa.Column('founding_date', sa.VARCHAR(), nullable=True),
    sa.Column('market_cap', sa.FLOAT(), nullable=True),
    sa.Column('revenue', sa.FLOAT(), nullable=True),
    sa.Column('num_ev_models', sa.INTEGER(), nullable=True),
    sa.Column('first_ev_model_date', sa.VARCHAR(), nullable=True),
    sa.Column('unionized', sa.BOOLEAN(), nullable=True),
    sa.Column('lrg_logo_img_url', sa.VARCHAR(), nullable=True),
    sa.ForeignKeyConstraint(['ceo_id'], ['people.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_makes_name', 'makes', ['name'], unique=False)
    op.create_index('ix_makes_id', 'makes', ['id'], unique=False)
    op.create_table('cars',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('make_id', sa.INTEGER(), nullable=True),
    sa.Column('model', sa.VARCHAR(), nullable=True),
    sa.Column('submodel', sa.VARCHAR(), nullable=True),
    sa.Column('generation', sa.VARCHAR(), nullable=True),
    sa.Column('image_url', sa.VARCHAR(), nullable=True),
    sa.Column('trim_first_released', sa.VARCHAR(), nullable=True),
    sa.Column('carmodel_first_released', sa.VARCHAR(), nullable=True),
    sa.Column('model_ended', sa.VARCHAR(), nullable=True),
    sa.Column('trim_ended', sa.VARCHAR(), nullable=True),
    sa.Column('current_price', sa.FLOAT(), nullable=True),
    sa.Column('price_history', sqlite.JSON(), nullable=True),
    sa.Column('customer_and_critic_rating', sa.FLOAT(), nullable=True),
    sa.Column('vehicle_class', sa.VARCHAR(), nullable=True),
    sa.Column('color_options', sqlite.JSON(), nullable=True),
    sa.Column('acceleration_0_60', sa.FLOAT(), nullable=True),
    sa.Column('top_speed', sa.FLOAT(), nullable=True),
    sa.Column('speed_acc', sqlite.JSON(), nullable=True),
    sa.Column('power', sa.FLOAT(), nullable=True),
    sa.Column('torque', sa.FLOAT(), nullable=True),
    sa.Column('drive_type', sa.VARCHAR(), nullable=True),
    sa.Column('battery_capacity', sa.FLOAT(), nullable=True),
    sa.Column('range', sa.FLOAT(), nullable=True),
    sa.Column('range_details', sqlite.JSON(), nullable=True),
    sa.Column('nacs', sa.BOOLEAN(), nullable=True),
    sa.Column('battery_max_charging_speed', sa.FLOAT(), nullable=True),
    sa.Column('chargers', sqlite.JSON(), nullable=True),
    sa.Column('reviews', sqlite.JSON(), nullable=True),
    sa.Column('available_countries', sqlite.JSON(), nullable=True),
    sa.Column('full_adult_seat_no', sa.INTEGER(), nullable=True),
    sa.Column('seating_details', sqlite.JSON(), nullable=True),
    sa.Column('number_of_passenger_doors', sa.INTEGER(), nullable=True),
    sa.Column('has_frunk', sa.BOOLEAN(), nullable=True),
    sa.Column('frunk_capacity', sa.FLOAT(), nullable=True),
    sa.Column('has_spare_tire', sa.BOOLEAN(), nullable=True),
    sa.Column('towing', sa.BOOLEAN(), nullable=True),
    sa.Column('towing_details', sqlite.JSON(), nullable=True),
    sa.Column('one_pedal_driving', sa.BOOLEAN(), nullable=True),
    sa.Column('regen_details', sqlite.JSON(), nullable=True),
    sa.Column('bidirectional_charging', sa.BOOLEAN(), nullable=True),
    sa.Column('bidirectional_details', sqlite.JSON(), nullable=True),
    sa.Column('vehicle_sound_preferences', sqlite.JSON(), nullable=True),
    sa.Column('remote_hc', sqlite.JSON(), nullable=True),
    sa.Column('keyless', sa.BOOLEAN(), nullable=True),
    sa.Column('autopilot_features', sqlite.JSON(), nullable=True),
    sa.Column('sentry_security', sa.BOOLEAN(), nullable=True),
    sa.Column('sentry_details', sqlite.JSON(), nullable=True),
    sa.Column('euroncap_rating', sa.VARCHAR(), nullable=True),
    sa.Column('nhtsa_rating', sa.VARCHAR(), nullable=True),
    sa.ForeignKeyConstraint(['make_id'], ['makes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_cars_model', 'cars', ['model'], unique=False)
    op.create_index('ix_cars_id', 'cars', ['id'], unique=False)
    # ### end Alembic commands ###
